{"ast":null,"code":"//get product\nexport const getProducts = (products, category, type, limit) => {\n  category = category && category.toLowerCase() === \"all\" ? \"\" : category;\n  const finalProducts = category ? products.filter(product => product.category.toLowerCase() === category.toLowerCase()) : products;\n\n  if (type && type === \"new\") {\n    const newProducts = finalProducts.filter(product => product.new);\n    return newProducts.slice(0, limit ? limit : newProducts.length);\n  } else {\n    return finalProducts && finalProducts.slice(0, limit ? limit : finalProducts.length);\n  }\n}; //get product by slug\n\nexport const getProductBySlug = (products, slug) => {\n  return slug ? products.find(product => product.slug.toLowerCase() === slug.toLowerCase()) : null;\n}; //sort product\n\nexport const getProductBySort = (products, type, limit) => {\n  function sortWithCondition(arr, value, reverse = false) {\n    let num = reverse ? -1 : 1;\n    return products.slice(0, limit ? limit : products.length).sort((a, b) => {\n      if (a[value] < b[value]) {\n        return -1 * num;\n      }\n\n      if (a[value] > b[value]) {\n        return 1 * num;\n      }\n\n      return 0;\n    });\n  }\n\n  if (!type || type === \"default\") {\n    return products;\n  } else if (type === \"az\") {\n    return sortWithCondition(products, \"name\");\n  } else if (type === \"za\") {\n    return sortWithCondition(products, \"name\", true);\n  } else if (type === \"lowToHigh\") {\n    return sortWithCondition(products, \"price\");\n  } else if (type === \"highToLow\") {\n    return sortWithCondition(products, \"price\", true);\n  } else {\n    return products.slice(0, limit ? limit : products.length);\n  }\n}; //get product by price\n\nexport const getProductByPrice = (products, from, to, limit) => {\n  if (from && !to) {\n    return products.filter(p => p.price > from);\n  } else if (!from && to) {\n    return products.filter(p => p.price < to);\n  } else if (!from && !to) {\n    return products;\n  } else {\n    return products.filter(p => p.price > from && p.price < to);\n  }\n}; //get product by brand\n\nexport const getProductByBrand = (products, brand) => {\n  return brand ? products.filter(p => p.brand.toLowerCase() === brand.toLowerCase()) : products;\n}; //get product by filter\n\nexport const getProductbyFilter = (products, sortType, category, from, to, brand, limit) => {\n  let sortedProduct;\n\n  if (category) {\n    let productCategory = getProducts(products, category);\n\n    if (to && !brand) {\n      let productPrice = getProductByPrice(productCategory, from, to);\n      sortedProduct = getProductBySort(productPrice, sortType);\n    } else if (!to && brand) {\n      let productBrand = getProductByBrand(productCategory, brand);\n      sortedProduct = getProductBySort(productBrand, sortType);\n    } else if (to && brand) {\n      let productBrand = getProductByBrand(productCategory, brand);\n      let productPrice = getProductByPrice(productCategory, from, to);\n      let commonProducts = productBrand.filter(o1 => productPrice.some(o2 => o1.id === o2.id));\n      sortedProduct = getProductBySort(commonProducts, sortType);\n    } else {\n      sortedProduct = getProductBySort(productCategory, sortType);\n    }\n  } else {\n    sortedProduct = getProductBySort(products, sortType);\n  }\n\n  return sortedProduct.slice(0, limit || products.length);\n};","map":null,"metadata":{},"sourceType":"module"}