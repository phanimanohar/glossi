{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { v4 as uuidv4 } from \"uuid\";\nimport { CART } from \"../variables\";\nconst initialState = [];\nexport default function cartReducer(state = initialState, action) {\n  const cartItem = state.find(item => item.cartId === action.cartId);\n  const cartItemIndex = cartItem && state.indexOf(cartItem);\n\n  switch (action.type) {\n    case CART.ADD_TO_CART:\n      if (!action.product.variation || action.product.variation.length === 0) {\n        const addedCartItem = state.find(item => item.id === action.product.id);\n        const addedCartItemIndex = addedCartItem && state.indexOf(addedCartItem);\n\n        if (!addedCartItem) {\n          return [...state, _objectSpread(_objectSpread({}, action.product), {}, {\n            cartQuantity: action.quantity || 1,\n            cartId: uuidv4()\n          })];\n        } else {\n          return [...state.slice(0, addedCartItemIndex), _objectSpread(_objectSpread({}, addedCartItem), {}, {\n            cartQuantity: action.quantity ? addedCartItem.cartQuantity + action.quantity : addedCartItem.cartQuantity + 1\n          }), ...state.slice(addedCartItemIndex + 1)];\n        }\n      } else {\n        if (!action.color || action.color === \"\") {\n          const addedCartItem = state.find(item => item.id === action.product.id);\n          const addedCartItemIndex = addedCartItem && state.indexOf(addedCartItem);\n\n          if (!addedCartItem) {\n            return [...state, _objectSpread(_objectSpread({}, action.product), {}, {\n              cartQuantity: action.quantity || 1,\n              cartId: uuidv4()\n            })];\n          } else {\n            return [...state.slice(0, addedCartItemIndex), _objectSpread(_objectSpread({}, addedCartItem), {}, {\n              cartQuantity: action.quantity ? addedCartItem.cartQuantity + action.quantity : addedCartItem.cartQuantity + 1\n            }), ...state.slice(addedCartItemIndex + 1)];\n          }\n        } else {\n          const addedCartItem = state.find(item => item.id === action.product.id && item.selectedColor && item.selectedColor === action.color);\n          const addedCartItemIndex = addedCartItem && state.indexOf(addedCartItem);\n\n          if (!addedCartItem) {\n            return [...state, _objectSpread(_objectSpread({}, action.product), {}, {\n              cartQuantity: action.quantity || 1,\n              selectedColor: action.color,\n              cartId: uuidv4()\n            })];\n          } else {\n            return [...state.slice(0, addedCartItemIndex), _objectSpread(_objectSpread({}, addedCartItem), {}, {\n              cartQuantity: action.quantity ? addedCartItem.cartQuantity + action.quantity : addedCartItem.cartQuantity + 1\n            }), ...state.slice(addedCartItemIndex + 1)];\n          }\n        }\n      }\n\n    case CART.REMOVE_FROM_CART:\n      return [...state.slice(0, cartItemIndex), ...state.slice(cartItemIndex + 1)];\n\n    case CART.REMOVE_ALL_FROM_CART:\n      return [];\n\n    case CART.INCREASE_QUANTITY_CART:\n      return [...state.slice(0, cartItemIndex), _objectSpread(_objectSpread({}, cartItem), {}, {\n        cartQuantity: cartItem.cartQuantity + 1\n      }), ...state.slice(cartItemIndex + 1)];\n\n    case CART.DECREASE_QUANTITY_CART:\n      if (cartItem.cartQuantity < 2) {\n        return;\n      }\n\n      return [...state.slice(0, cartItemIndex), _objectSpread(_objectSpread({}, cartItem), {}, {\n        cartQuantity: cartItem.cartQuantity - 1\n      }), ...state.slice(cartItemIndex + 1)];\n\n    default:\n      return state;\n  }\n}","map":null,"metadata":{},"sourceType":"module"}